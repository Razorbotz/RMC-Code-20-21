// Generated by gencpp from file messages/AxisState.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_AXISSTATE_H
#define MESSAGES_MESSAGE_AXISSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messages
{
template <class ContainerAllocator>
struct AxisState_
{
  typedef AxisState_<ContainerAllocator> Type;

  AxisState_()
    : joystick(0)
    , axis(0)
    , state(0.0)  {
    }
  AxisState_(const ContainerAllocator& _alloc)
    : joystick(0)
    , axis(0)
    , state(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _joystick_type;
  _joystick_type joystick;

   typedef uint8_t _axis_type;
  _axis_type axis;

   typedef float _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::messages::AxisState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::AxisState_<ContainerAllocator> const> ConstPtr;

}; // struct AxisState_

typedef ::messages::AxisState_<std::allocator<void> > AxisState;

typedef boost::shared_ptr< ::messages::AxisState > AxisStatePtr;
typedef boost::shared_ptr< ::messages::AxisState const> AxisStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::AxisState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::AxisState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages::AxisState_<ContainerAllocator1> & lhs, const ::messages::AxisState_<ContainerAllocator2> & rhs)
{
  return lhs.joystick == rhs.joystick &&
    lhs.axis == rhs.axis &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages::AxisState_<ContainerAllocator1> & lhs, const ::messages::AxisState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::messages::AxisState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::AxisState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::AxisState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::AxisState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::AxisState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::AxisState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::AxisState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66b25cf96600974c62d570e9935b51ff";
  }

  static const char* value(const ::messages::AxisState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66b25cf96600974cULL;
  static const uint64_t static_value2 = 0x62d570e9935b51ffULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::AxisState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/AxisState";
  }

  static const char* value(const ::messages::AxisState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::AxisState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 joystick\n"
"uint8 axis\n"
"float32 state\n"
;
  }

  static const char* value(const ::messages::AxisState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::AxisState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joystick);
      stream.next(m.axis);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AxisState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::AxisState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::AxisState_<ContainerAllocator>& v)
  {
    s << indent << "joystick: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joystick);
    s << indent << "axis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.axis);
    s << indent << "state: ";
    Printer<float>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_AXISSTATE_H
