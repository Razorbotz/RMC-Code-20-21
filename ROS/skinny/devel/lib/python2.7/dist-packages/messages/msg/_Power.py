# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from messages/Power.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Power(genpy.Message):
  _md5sum = "a5bf87df7460476e356f8a0cdbf06096"
  _type = "messages/Power"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 voltage
float32 current0
float32 current1
float32 current2
float32 current3
float32 current4
float32 current5
float32 current6
float32 current7
float32 current8
float32 current9
float32 current10
float32 current11
float32 current12
float32 current13
float32 current14 
float32 current15
"""
  __slots__ = ['voltage','current0','current1','current2','current3','current4','current5','current6','current7','current8','current9','current10','current11','current12','current13','current14','current15']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voltage,current0,current1,current2,current3,current4,current5,current6,current7,current8,current9,current10,current11,current12,current13,current14,current15

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Power, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.voltage is None:
        self.voltage = 0.
      if self.current0 is None:
        self.current0 = 0.
      if self.current1 is None:
        self.current1 = 0.
      if self.current2 is None:
        self.current2 = 0.
      if self.current3 is None:
        self.current3 = 0.
      if self.current4 is None:
        self.current4 = 0.
      if self.current5 is None:
        self.current5 = 0.
      if self.current6 is None:
        self.current6 = 0.
      if self.current7 is None:
        self.current7 = 0.
      if self.current8 is None:
        self.current8 = 0.
      if self.current9 is None:
        self.current9 = 0.
      if self.current10 is None:
        self.current10 = 0.
      if self.current11 is None:
        self.current11 = 0.
      if self.current12 is None:
        self.current12 = 0.
      if self.current13 is None:
        self.current13 = 0.
      if self.current14 is None:
        self.current14 = 0.
      if self.current15 is None:
        self.current15 = 0.
    else:
      self.voltage = 0.
      self.current0 = 0.
      self.current1 = 0.
      self.current2 = 0.
      self.current3 = 0.
      self.current4 = 0.
      self.current5 = 0.
      self.current6 = 0.
      self.current7 = 0.
      self.current8 = 0.
      self.current9 = 0.
      self.current10 = 0.
      self.current11 = 0.
      self.current12 = 0.
      self.current13 = 0.
      self.current14 = 0.
      self.current15 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17f().pack(_x.voltage, _x.current0, _x.current1, _x.current2, _x.current3, _x.current4, _x.current5, _x.current6, _x.current7, _x.current8, _x.current9, _x.current10, _x.current11, _x.current12, _x.current13, _x.current14, _x.current15))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.voltage, _x.current0, _x.current1, _x.current2, _x.current3, _x.current4, _x.current5, _x.current6, _x.current7, _x.current8, _x.current9, _x.current10, _x.current11, _x.current12, _x.current13, _x.current14, _x.current15,) = _get_struct_17f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17f().pack(_x.voltage, _x.current0, _x.current1, _x.current2, _x.current3, _x.current4, _x.current5, _x.current6, _x.current7, _x.current8, _x.current9, _x.current10, _x.current11, _x.current12, _x.current13, _x.current14, _x.current15))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.voltage, _x.current0, _x.current1, _x.current2, _x.current3, _x.current4, _x.current5, _x.current6, _x.current7, _x.current8, _x.current9, _x.current10, _x.current11, _x.current12, _x.current13, _x.current14, _x.current15,) = _get_struct_17f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17f = None
def _get_struct_17f():
    global _struct_17f
    if _struct_17f is None:
        _struct_17f = struct.Struct("<17f")
    return _struct_17f
