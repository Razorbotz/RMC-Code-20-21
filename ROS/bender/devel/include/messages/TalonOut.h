// Generated by gencpp from file messages/TalonOut.msg
// DO NOT EDIT!


#ifndef MESSAGES_MESSAGE_TALONOUT_H
#define MESSAGES_MESSAGE_TALONOUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messages
{
template <class ContainerAllocator>
struct TalonOut_
{
  typedef TalonOut_<ContainerAllocator> Type;

  TalonOut_()
    : deviceID(0)
    , busVoltage(0.0)
    , outputCurrent(0.0)
    , outputVoltage(0.0)
    , outputPercent(0.0)
    , temperature(0.0)
    , sensorPosition(0)
    , sensorVelocity(0)
    , closedLoopError(0)
    , integralAccumulator(0)
    , errorDerivative(0)  {
    }
  TalonOut_(const ContainerAllocator& _alloc)
    : deviceID(0)
    , busVoltage(0.0)
    , outputCurrent(0.0)
    , outputVoltage(0.0)
    , outputPercent(0.0)
    , temperature(0.0)
    , sensorPosition(0)
    , sensorVelocity(0)
    , closedLoopError(0)
    , integralAccumulator(0)
    , errorDerivative(0)  {
  (void)_alloc;
    }



   typedef int32_t _deviceID_type;
  _deviceID_type deviceID;

   typedef float _busVoltage_type;
  _busVoltage_type busVoltage;

   typedef float _outputCurrent_type;
  _outputCurrent_type outputCurrent;

   typedef float _outputVoltage_type;
  _outputVoltage_type outputVoltage;

   typedef float _outputPercent_type;
  _outputPercent_type outputPercent;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef int32_t _sensorPosition_type;
  _sensorPosition_type sensorPosition;

   typedef int32_t _sensorVelocity_type;
  _sensorVelocity_type sensorVelocity;

   typedef int32_t _closedLoopError_type;
  _closedLoopError_type closedLoopError;

   typedef int32_t _integralAccumulator_type;
  _integralAccumulator_type integralAccumulator;

   typedef int32_t _errorDerivative_type;
  _errorDerivative_type errorDerivative;





  typedef boost::shared_ptr< ::messages::TalonOut_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages::TalonOut_<ContainerAllocator> const> ConstPtr;

}; // struct TalonOut_

typedef ::messages::TalonOut_<std::allocator<void> > TalonOut;

typedef boost::shared_ptr< ::messages::TalonOut > TalonOutPtr;
typedef boost::shared_ptr< ::messages::TalonOut const> TalonOutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages::TalonOut_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages::TalonOut_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'messages': ['/home/nvidia/SoftwareDevelopment/ROS/src/messages/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::messages::TalonOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages::TalonOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::TalonOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages::TalonOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::TalonOut_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages::TalonOut_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages::TalonOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8f6fc5634dde6263b80ec7fc1aa9dee";
  }

  static const char* value(const ::messages::TalonOut_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8f6fc5634dde626ULL;
  static const uint64_t static_value2 = 0x3b80ec7fc1aa9deeULL;
};

template<class ContainerAllocator>
struct DataType< ::messages::TalonOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages/TalonOut";
  }

  static const char* value(const ::messages::TalonOut_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages::TalonOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 deviceID\n\
float32 busVoltage\n\
float32 outputCurrent\n\
float32 outputVoltage\n\
float32 outputPercent\n\
float32 temperature\n\
int32 sensorPosition\n\
int32 sensorVelocity\n\
int32 closedLoopError \n\
int32 integralAccumulator\n\
int32 errorDerivative\n\
";
  }

  static const char* value(const ::messages::TalonOut_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages::TalonOut_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.deviceID);
      stream.next(m.busVoltage);
      stream.next(m.outputCurrent);
      stream.next(m.outputVoltage);
      stream.next(m.outputPercent);
      stream.next(m.temperature);
      stream.next(m.sensorPosition);
      stream.next(m.sensorVelocity);
      stream.next(m.closedLoopError);
      stream.next(m.integralAccumulator);
      stream.next(m.errorDerivative);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TalonOut_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages::TalonOut_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages::TalonOut_<ContainerAllocator>& v)
  {
    s << indent << "deviceID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deviceID);
    s << indent << "busVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.busVoltage);
    s << indent << "outputCurrent: ";
    Printer<float>::stream(s, indent + "  ", v.outputCurrent);
    s << indent << "outputVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.outputVoltage);
    s << indent << "outputPercent: ";
    Printer<float>::stream(s, indent + "  ", v.outputPercent);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "sensorPosition: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensorPosition);
    s << indent << "sensorVelocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensorVelocity);
    s << indent << "closedLoopError: ";
    Printer<int32_t>::stream(s, indent + "  ", v.closedLoopError);
    s << indent << "integralAccumulator: ";
    Printer<int32_t>::stream(s, indent + "  ", v.integralAccumulator);
    s << indent << "errorDerivative: ";
    Printer<int32_t>::stream(s, indent + "  ", v.errorDerivative);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_MESSAGE_TALONOUT_H
