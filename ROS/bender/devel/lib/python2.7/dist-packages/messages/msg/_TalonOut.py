# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from messages/TalonOut.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TalonOut(genpy.Message):
  _md5sum = "d8f6fc5634dde6263b80ec7fc1aa9dee"
  _type = "messages/TalonOut"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 deviceID
float32 busVoltage
float32 outputCurrent
float32 outputVoltage
float32 outputPercent
float32 temperature
int32 sensorPosition
int32 sensorVelocity
int32 closedLoopError 
int32 integralAccumulator
int32 errorDerivative
"""
  __slots__ = ['deviceID','busVoltage','outputCurrent','outputVoltage','outputPercent','temperature','sensorPosition','sensorVelocity','closedLoopError','integralAccumulator','errorDerivative']
  _slot_types = ['int32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       deviceID,busVoltage,outputCurrent,outputVoltage,outputPercent,temperature,sensorPosition,sensorVelocity,closedLoopError,integralAccumulator,errorDerivative

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TalonOut, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.deviceID is None:
        self.deviceID = 0
      if self.busVoltage is None:
        self.busVoltage = 0.
      if self.outputCurrent is None:
        self.outputCurrent = 0.
      if self.outputVoltage is None:
        self.outputVoltage = 0.
      if self.outputPercent is None:
        self.outputPercent = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.sensorPosition is None:
        self.sensorPosition = 0
      if self.sensorVelocity is None:
        self.sensorVelocity = 0
      if self.closedLoopError is None:
        self.closedLoopError = 0
      if self.integralAccumulator is None:
        self.integralAccumulator = 0
      if self.errorDerivative is None:
        self.errorDerivative = 0
    else:
      self.deviceID = 0
      self.busVoltage = 0.
      self.outputCurrent = 0.
      self.outputVoltage = 0.
      self.outputPercent = 0.
      self.temperature = 0.
      self.sensorPosition = 0
      self.sensorVelocity = 0
      self.closedLoopError = 0
      self.integralAccumulator = 0
      self.errorDerivative = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i5f5i().pack(_x.deviceID, _x.busVoltage, _x.outputCurrent, _x.outputVoltage, _x.outputPercent, _x.temperature, _x.sensorPosition, _x.sensorVelocity, _x.closedLoopError, _x.integralAccumulator, _x.errorDerivative))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.deviceID, _x.busVoltage, _x.outputCurrent, _x.outputVoltage, _x.outputPercent, _x.temperature, _x.sensorPosition, _x.sensorVelocity, _x.closedLoopError, _x.integralAccumulator, _x.errorDerivative,) = _get_struct_i5f5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i5f5i().pack(_x.deviceID, _x.busVoltage, _x.outputCurrent, _x.outputVoltage, _x.outputPercent, _x.temperature, _x.sensorPosition, _x.sensorVelocity, _x.closedLoopError, _x.integralAccumulator, _x.errorDerivative))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.deviceID, _x.busVoltage, _x.outputCurrent, _x.outputVoltage, _x.outputPercent, _x.temperature, _x.sensorPosition, _x.sensorVelocity, _x.closedLoopError, _x.integralAccumulator, _x.errorDerivative,) = _get_struct_i5f5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i5f5i = None
def _get_struct_i5f5i():
    global _struct_i5f5i
    if _struct_i5f5i is None:
        _struct_i5f5i = struct.Struct("<i5f5i")
    return _struct_i5f5i
