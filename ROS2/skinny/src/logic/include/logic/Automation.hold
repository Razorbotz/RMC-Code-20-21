#pragma once

#include <rclcpp/rclcpp.hpp>
#include <std_msgs/msg/float32.hpp>


#include "AutomationTypes.hpp"


class Automation{
    public:

    std::shared_ptr<rclcpp::Publisher<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > > driveLeftSpeedPublisher;
    std::shared_ptr<rclcpp::Publisher<std_msgs::msg::Float32_<std::allocator<void> >, std::allocator<void> > > driveRightSpeedPublisher;

    rclcpp::Node::SharedPtr node;
    Position position;
    Quaternion orientationQuaternion;
    EulerAngles orientation;
    float currentLeftSpeed=0;
    float currentRightSpeed=0;


    virtual void automate() = 0;

    void setNode(rclcpp::Node::SharedPtr node){
        this->node=node;
        driveLeftSpeedPublisher= this->node->create_publisher<std_msgs::msg::Float32>("drive_left_speed",1);
        driveRightSpeedPublisher= this->node->create_publisher<std_msgs::msg::Float32>("drive_right_speed",1);
    }


    void setPosition(Position position){
        this->position = position;
	this->orientationQuaternion.x=position.ox;
	this->orientationQuaternion.y=position.oy;
	this->orientationQuaternion.z=position.oz;
	this->orientationQuaternion.w=position.ow;
	this->orientation=toEulerAngles(this->orientationQuaternion);
    }


    void changeSpeed(float left, float right){
        if(currentLeftSpeed==left && currentRightSpeed==right) return;
        currentLeftSpeed=left;
        currentRightSpeed=right;
        std_msgs::msg::Float32 speedLeft;
        std_msgs::msg::Float32 speedRight;
        speedLeft.data=left;
        speedRight.data=right;
        driveLeftSpeedPublisher->publish(speedLeft);
        driveRightSpeedPublisher->publish(speedRight);
    }

    EulerAngles toEulerAngles(Quaternion q) {
         EulerAngles angles;

         // roll (x-axis rotation)
         double sinr_cosp = 2 * (q.w * q.x + q.y * q.z);
         double cosr_cosp = 1 - 2 * (q.x * q.x + q.y * q.y);
         angles.roll = std::atan2(sinr_cosp, cosr_cosp);

        // pitch (y-axis rotation)
        double sinp = 2 * (q.w * q.y - q.z * q.x);
        if (std::abs(sinp) >= 1)
            angles.pitch = std::copysign(M_PI / 2, sinp); // use 90 degrees if out of range
        else
            angles.pitch = std::asin(sinp);

        // yaw (z-axis rotation)
        double siny_cosp = 2 * (q.w * q.z + q.x * q.y);
        double cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
        angles.yaw = std::atan2(siny_cosp, cosy_cosp);

        return angles;
    }

};
